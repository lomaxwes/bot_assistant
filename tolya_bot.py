import datetime
import os
import aiohttp
from sqlalchemy import create_engine, Column, Integer, VARCHAR, DateTime, inspect, Sequence
from sqlalchemy.orm import declarative_base
from dotenv import load_dotenv
from sqlalchemy.orm import sessionmaker
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, \
    CallbackContext
import json
from contextlib import contextmanager
import traceback


load_dotenv()

DATABASE_URL = os.getenv("DATABASE_URL")
bot_token = os.getenv("TOKEN_BOT_GPT_MODEL")
file_path_errors = os.getenv("FILE_PATH_ERRORS")
file_path_users = os.getenv("FILE_PATH_USERS")
file_path_indefinite = os.getenv("FILE_PATH_INDEFINITE")


engine = create_engine(DATABASE_URL)
Base = declarative_base()
Session = sessionmaker(bind=engine)
qa_id_seq = Sequence('qa_id_seq')


class QA(Base):
    __tablename__ = 'questions_answers'

    id = Column(Integer, qa_id_seq, primary_key=True)
    user_id = Column(Integer)
    user_name = Column(VARCHAR(200), nullable=True)
    question = Column(VARCHAR(2000))
    answer = Column(VARCHAR(2000), nullable=True)
    react = Column(Integer)
    comment = Column(VARCHAR(2000), nullable=True)
    timestamp = Column(DateTime, default=datetime.datetime.utcnow)


inspector = inspect(engine)
if not inspector.has_table('questions_answers'):
    Base.metadata.create_all(engine)


try:
    with open(file_path_users, "r", encoding="utf-8") as file:
        users = json.load(file)
except FileNotFoundError:
    users = {}


try:
    with open(file_path_indefinite, "r", encoding="utf-8") as file:
        indefinite = json.load(file)
except FileNotFoundError:
    indefinite = {}


@contextmanager
def session_scope():
    session = Session()
    try:
        yield session
        session.commit()
    except:
        session.rollback()
        raise
    finally:
        session.close()


async def get_answer_async(text):
    payload = {"text": text}
    async with aiohttp.ClientSession() as session:
        async with session.post('http://127.0.0.1:8000/ask', json=payload) as resp:
            return await resp.json()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    first_name = update.message.from_user.first_name
    last_name = update.message.from_user.last_name

    if str(user_id) not in users:
        await update.message.reply_text(f"{first_name} {last_name or ''} –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à ID: {user_id}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª IT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞!")
        if str(user_id) not in indefinite:
            indefinite[user_id] = f"{first_name} {last_name}"
            with open(file_path_indefinite, "w", encoding="utf-8") as file:
                json.dump(indefinite, file, ensure_ascii=False)
    else:
        await update.message.reply_text('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ChatGPT')


# –£–¥–∞–ª–µ–Ω–æ, —Ç–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async def process_model_output(raw_text):
    pass
    processed_text = ''
    return processed_text


def update_reaction(session, message_id, reaction):
    qa_record = session.query(QA).filter_by(id=message_id).first()
    if qa_record:
        qa_record.react = reaction
        session.commit()


async def button(update: Update, context: CallbackContext):
    query = update.callback_query


    reaction_str, qa_id_str = query.data.split(':')
    reaction = 1 if reaction_str == 'like' else 0

    await query.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏: {}'.format(reaction_str))

    if reaction_str == 'commit':
        context.user_data['awaiting_comment'] = qa_id_str
        await query.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É:')
        return

    with session_scope() as session:
        qa_record = session.query(QA).filter_by(id=qa_id_str).first()
        if qa_record:
            qa_record.react = reaction
            session.commit()

            reaction_text = "like" if reaction == 1 else "dislike"
            button_text = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {reaction_text}'

            keyboard = [
                [
                    InlineKeyboardButton("üëç", callback_data=f'like:{qa_id_str}'),
                    InlineKeyboardButton("üëé", callback_data=f'dislike:{qa_id_str}'),
                ],
                [
                    InlineKeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f'commit:{qa_id_str}'),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.edit_text(f'–û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç: {button_text}', reply_markup=reply_markup)


async def text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}"

    if str(user_id) not in users:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª IT - –æ—Ñ–∏—Å 100.')
    elif update.message.text.startswith('/user_id'):
        await get_user_id(update, context)
    elif update.message.text.startswith('/first_name'):
        await get_user_first_name(update, context)
    elif update.message.text.startswith('/last_name'):
        await get_user_last_name(update, context)
    elif update.message.text.startswith('/username'):
        await get_username(update, context)
    else:
        if 'awaiting_comment' in context.user_data:
            qa_id = context.user_data['awaiting_comment']
            context.user_data.pop('awaiting_comment')

            with session_scope() as session:
                qa_record = session.query(QA).filter_by(id=qa_id).first()
                if qa_record:
                    qa_record.comment = update.message.text
                    session.commit()
                    await update.message.reply_text('–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.')
                else:
                    await update.message.reply_text('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å/–æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')
        else:
            try:
                first_message = await update.message.reply_text('–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...')
                res = await get_answer_async(update.message.text)
                if res['message'].count('\\\\') > 1:
                    processed_result = await process_model_output(res['message'])
                else:
                    processed_result = res['message']

                processed_result_truncated = processed_result[:2000]
                await context.bot.edit_message_text(text=processed_result, chat_id=update.message.chat_id,
                                                    message_id=first_message.message_id)

                with session_scope() as session:
                    new_qa = QA(user_id=user_id, user_name=user_name, question=update.message.text, answer=processed_result_truncated)
                    session.add(new_qa)
                    session.commit()

                    context.bot_data['last_qa_id'] = new_qa.id

                    keyboard = [
                        [
                            InlineKeyboardButton("üëç", callback_data=f'like:{new_qa.id}'),
                            InlineKeyboardButton("üëé", callback_data=f'dislike:{new_qa.id}'),
                        ],
                        [
                            InlineKeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f'commit:{new_qa.id}'),
                        ]
                    ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text('–û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç ', reply_markup=reply_markup)

            except Exception as e:
                current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                with open(file_path_errors, "a", encoding="utf-8") as error_file:
                    error_file.write(f"Error {current_datetime}: {str(e)}\n")
                    error_file.write(f"Traceback: {traceback.format_exc()}\n")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ chatgpt: {e}")
                await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.')


async def help_command(update, context) -> None:
    help_text = ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - —Å–ø—Ä–∞–≤–∫–∞\n/user_id - —É–∑–Ω–∞—Ç—å ID\n/first_name - "
                 "–≤–∞—à–µ –∏–º—è –≤ Telegram\n/last_name - –≤–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –≤ Telegram\n/username - –Ω–∏–∫ –≤ Telegram")
    await update.message.reply_text(help_text)


async def get_user_id(update, context) -> None:
    user_id = update.message.from_user.id
    await update.message.reply_text(f'–í–∞—à ID –≤ Telegram: {user_id}')


async def get_user_first_name(update, context) -> None:
    first_name = update.message.from_user.first_name
    await update.message.reply_text(f'–í–∞—à–µ –∏–º—è –≤ Telegram: {first_name}')


async def get_user_last_name(update, context) -> None:
    last_name = update.message.from_user.last_name
    if last_name:
        await update.message.reply_text(f'–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –≤ Telegram: {last_name}')
    else:
        await update.message.reply_text("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def get_username(update, context) -> None:
    username = update.message.from_user.username
    if username:
        await update.message.reply_text(f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram: {username}')
    else:
        await update.message.reply_text("–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


def main():
    application = Application.builder().token(bot_token).build()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')

    application.add_handler(CommandHandler("start", start, block=False))
    application.add_handler(CommandHandler("help", help_command, block=False))
    application.add_handler(CommandHandler("user_id", get_user_id, block=False))
    application.add_handler(CommandHandler("first_name", get_user_first_name, block=False))
    application.add_handler(CommandHandler("last_name", get_user_last_name, block=False))
    application.add_handler(CommandHandler("username", get_username, block=False))
    application.add_handler(MessageHandler(filters.TEXT, text, block=False))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()
    print('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')


if __name__ == "__main__":
    main()
